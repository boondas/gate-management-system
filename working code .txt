ARDUINO CODE

#include <WiFi.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>

// WiFi Configuration
const char* ssid = "VC-1044-2255";
const char* password = "bd32f6faf5";

// Flask Server Endpoint
const char* serverUrl = "https://gate-database-06187529afc2.herokuapp.com/validate_user";

// SIM900 Configuration
#define RXD2 16
#define TXD2 17

// Relay pin
#define RELAY_PIN 2

void sendATCommand(const char* command) {
  Serial2.println(command);
  delay(1000); // Wait for the command to process
}

String readSIM900() {
  String response = "";
  while (Serial2.available()) {
    char c = Serial2.read();
    response += c;
  }
  return response;
}

void setup() {
  // Serial and SIM900 Configuration
  Serial.begin(115200);
  Serial2.begin(9600, SERIAL_8N1, RXD2, TXD2);

  // Configure Relay Pin
  pinMode(RELAY_PIN, OUTPUT);
  digitalWrite(RELAY_PIN, LOW);

  // WiFi Connection
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");

  // Initialize SIM900
  sendATCommand("AT");            // Check communication
  sendATCommand("ATE0");          // Disable echo
  sendATCommand("AT+CLIP=1");     // Enable caller ID notification
}

void loop() {
  if (Serial2.available()) {
    String sim900Response = readSIM900();
    Serial.println("SIM900 Response: " + sim900Response);

    // Check for incoming call
    if (sim900Response.indexOf("+CLIP:") != -1) {
      String phoneNumber = extractPhoneNumber(sim900Response);
      Serial.println("Incoming Call from: " + phoneNumber);

      // Hang up the call
      hangUpCall();

      // Validate the phone number with Flask
      validatePhoneNumber(phoneNumber);
    }
  }

  delay(1000);
}

String extractPhoneNumber(String sim900Response) {
  int start = sim900Response.indexOf("\"") + 1;
  int end = sim900Response.indexOf("\"", start);
  return sim900Response.substring(start, end); // Ensure the '+' sign is included
}

void hangUpCall() {
  // Send ATH command to hang up the call
  sendATCommand("ATH");
  Serial.println("Call Hung Up");
}

void validatePhoneNumber(String phoneNumber) {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    String url = String(serverUrl) + "?phone_number=" + phoneNumber;

    http.begin(url);
    int httpCode = http.GET();

    if (httpCode == 200) {
      String payload = http.getString();
      Serial.println("Validation Response: " + payload);

      // Parse JSON response
      StaticJsonDocument<200> doc;
      DeserializationError error = deserializeJson(doc, payload);

      if (error) {
        Serial.print("JSON Parsing Failed: ");
        Serial.println(error.c_str());
        return;
      }

      const char* status = doc["status"];
      Serial.print("Status: ");
      Serial.println(status);

      if (String(status) == "VALID") {
        // Grant Access
        Serial.println("Access Granted");
        digitalWrite(RELAY_PIN, HIGH); // Activate relay
        delay(5000);                  // Keep the relay active for 5 seconds
        digitalWrite(RELAY_PIN, LOW); // Deactivate relay
      } else {
        Serial.println("Access Denied");
      }
    } else {
      Serial.println("HTTP Request Failed");
    }

    http.end();
  } else {
    Serial.println("WiFi not connected");
  }
}


MAIN.PY

import os
import re
from urllib.parse import urlparse
from dotenv import load_dotenv
import psycopg2
from flask import Flask, request, jsonify, render_template, redirect, url_for, send_from_directory

# Load environment variables
load_dotenv()

app = Flask(__name__)

# Database Connection
def connect_to_database():
    database_url = os.getenv("DATABASE_URL")
    if not database_url:
        raise Exception("DATABASE_URL is not set in environment variables.")

    url = urlparse(database_url)
    return psycopg2.connect(
        host=url.hostname,
        database=url.path[1:],  # Remove leading slash
        user=url.username,
        password=url.password,
        port=url.port
    )

# Home Route
@app.route('/')
def home():
    try:
        conn = connect_to_database()
        cursor = conn.cursor()
        cursor.execute("SELECT id, phone_number, name, access FROM users")
        users = cursor.fetchall()
        conn.close()
        return render_template('index.html', users=users)
    except Exception as e:
        return f"Error fetching users: {str(e)}", 500

# Add User
@app.route('/add_user', methods=['GET', 'POST'])
def add_user():
    if request.method == 'POST':
        phone_number = request.form.get('phone_number')
        name = request.form.get('name')
        access = request.form.get('access') == 'on'

        if not phone_number or not name:
            return "Phone number and name are required!", 400

        try:
            conn = connect_to_database()
            cursor = conn.cursor()
            cursor.execute(
                "INSERT INTO users (phone_number, name, access) VALUES (%s, %s, %s) "
                "ON CONFLICT (phone_number) DO UPDATE SET name = EXCLUDED.name, access = EXCLUDED.access",
                (phone_number, name, access)
            )
            conn.commit()
            conn.close()
            return redirect(url_for('home'))
        except Exception as e:
            return f"Error adding user: {str(e)}", 500
    return render_template('add_user.html')

# Edit User
@app.route('/edit_user/<int:user_id>', methods=['GET', 'POST'])
def edit_user(user_id):
    try:
        conn = connect_to_database()
        cursor = conn.cursor()

        if request.method == 'POST':
            phone_number = request.form.get('phone_number')
            name = request.form.get('name')
            access = request.form.get('access') == 'on'

            cursor.execute(
                "UPDATE users SET phone_number = %s, name = %s, access = %s WHERE id = %s",
                (phone_number, name, access, user_id)
            )
            conn.commit()
            conn.close()
            return redirect(url_for('home'))

        cursor.execute("SELECT phone_number, name, access FROM users WHERE id = %s", (user_id,))
        user = cursor.fetchone()
        conn.close()
        return render_template('edit_user.html', user_id=user_id, user=user)
    except Exception as e:
        return f"Error editing user: {str(e)}", 500

# Delete User
@app.route('/delete_user/<int:user_id>', methods=['POST'])
def delete_user(user_id):
    try:
        conn = connect_to_database()
        cursor = conn.cursor()
        cursor.execute("DELETE FROM users WHERE id = %s", (user_id,))
        conn.commit()
        conn.close()
        return redirect(url_for('home'))
    except Exception as e:
        return f"Error deleting user: {str(e)}", 500

# Validate User
@app.route('/validate_user', methods=['GET'])
def validate_user():
    phone_number = request.args.get('phone_number')
    if not phone_number:
        return jsonify({"status": "ERROR", "message": "Phone number is required"}), 400

    phone_number = re.sub(r'\D', '', phone_number)

    try:
        conn = connect_to_database()
        cursor = conn.cursor()
        cursor.execute("SELECT name, access FROM users WHERE REPLACE(phone_number, '+', '') = %s", (phone_number,))
        result = cursor.fetchone()
        conn.close()

        if result:
            name, access = result
            if access:
                return jsonify({"status": "VALID", "message": f"Access granted for {name}"})
            else:
                return jsonify({"status": "DENIED", "message": "Access denied"})
        else:
            return jsonify({"status": "INVALID", "message": "Unauthorized phone number"})
    except Exception as e:
        return jsonify({"status": "ERROR", "message": str(e)}), 500

# Serve Static Files
@app.route('/static/<path:filename>')
def serve_static(filename):
    return send_from_directory('static', filename)

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=5000, debug=True)
